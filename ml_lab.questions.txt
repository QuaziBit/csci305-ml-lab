Olexandr Matveyev
CSCI 305
Spring 2018
Lab Questions
=======================
1.
   val it = [4,2,5,2,6,10] : int list

2.
   Function f increments each element in the [int list] by 1

3.
   If function argument is an empty list, then it will return an empty list

4.
   If function argument is not an empty list, then it will loop via given list
   and increment each element in the list by 1, and return new int list;

5.
   Question 5: false
   
   My isMember function declared in this way: fun isMember(v, tmp) = ...
   In order to run this test I did some changes:
   isMember "one" ["1", "2", "3", "4"] --> isMember("one",["1", "2", "3", "4"]);

6.
   It uses tail recursion

7.
   # In terminal [1]
   - list2Set(["it", "was", "the", "best", "of", "times,", "it", "was", "the", "worst", "of", "times"]);
   - val it = Set ("it",Set ("was",Set #)) : string Set
	
   # In terminal [2]
   -  val quest7 = list2Set(["it", "was", "the", "best", "of", "times,", "it", "was", "the", "worst", "of", "times"]);
   - val it = Set ("it",Set ("was",Set #)) : string Set
   - stringifyStringSet quest7;
   - val it = "it was the best of times, it was the worst of times " : string

8.
   Tail recursive functions tend to run faster than their standard counterparts.
   It is faster because with every new recursive call the tail of list shorten down.

9.
   # In the ml_lab.sml
   --> list2Set(union(["green", "eggs", "and"],["ham"]));
   --> { green eggs and ham }
   
   # In terminal [1]
   - union(["green", "eggs", "and"],["ham"]);
   - val it = ["green","eggs","and","ham"] : string list
   
   # In terminal [2]
   - list2Set(union(["green", "eggs", "and"],["ham"]));
   - val it = Set ("green",Set ("eggs",Set #)) : string Set

10.
	# In the ml_lab.sml
	--> list2Set(intersect(["stewed", "tomatoes", "and", "macaroni"],["macaroni", "and", "cheese"]));
	--> { and macaroni }
	
	# In terminal [1]
	- intersect(["stewed", "tomatoes", "and", "macaroni"],["macaroni", "and", "cheese"]);
    - val it = ["and","macaroni"] : string list
	
	# In terminal [2]
	- list2Set(intersect(["stewed", "tomatoes", "and", "macaroni"],["macaroni", "and", "cheese"]));
    - val it = Set ("and",Set ("macaroni",Empty)) : string Set

11.
    I did not find anything that I could liked in the ML.

12.
    Its syntax is difficult. 
	And using recursive calls in the functions all the time also difficult to understand.

13.
    Yes, I did enjoy. Even if it was difficult to finish it still I learn something new.

14.
	~20

15.
	I think that I will never use ML language again.
